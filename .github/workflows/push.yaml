name: push

on:
  create:
  pull_request:
  push:
    branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
      - main          # triggers on pushes that contain changes in main

jobs:
  test:
    name: Unit Tests
    runs-on: [ ubuntu-latest ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.x' # The Go version to download (if necessary) and use.

      # Run build of the application
      - name: Run build
        run: go build .

      # Run gofmt on the code
      - name: Run gofmt
        run: gofmt -d

      # Run testing on the code
      - name: Run testing
        run: |
          go test -v -race -coverprofile=coverage.txt ./...
          go test -race -json ./... > report.json
          curl -s https://codecov.io/bash | bash

  lint:
    strategy:
      matrix:
        go-version: [ 1.15.x ]
        os: [ ubuntu-latest ]
    name: Lint
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29
          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: -v

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dproject.settings=./.sonar-project.properties
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  tag:
    name: Tag Creation
    if: ${{ github.event_name == 'push' }}
    runs-on: [ ubuntu-latest ]
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@v2

      - name: set up bot
        run: |
          git config --global user.name "xmidt-bot"
          git config --global user.email "$BOT_EMAIL"

      - name: export variables and tag commit
        run: |
          export OLD_VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | tail -1 | sed 's/v\(.*\)/\1/')
          export TAG=$(cat CHANGELOG.md | perl -0777 -ne 'print "$1" if /.*## \[Unreleased\]\s+## \[(v\d+.\d+.\d+)\].*/s')
          export TODAY=`date +'%m/%d/%Y'`
          export NOTES=$(cat CHANGELOG.md | perl -0777 -ne 'print "$ENV{TODAY}\n\n$1\n" if /.*## \[$ENV{TAG}\]\s(.*?)\s+## \[(v\d+.\d+.\d+)\].*/s')
          if [[ "$TAG" != "" && "$TAG" != "$OLD_VERSION" ]]; then git tag -a "$TAG" -m "$NOTES"; git push origin --tags; echo $?; fi
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          draft: false
          prerelease: false